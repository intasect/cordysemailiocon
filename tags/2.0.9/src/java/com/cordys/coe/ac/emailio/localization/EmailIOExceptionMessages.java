package com.cordys.coe.ac.emailio.localization;

import com.eibus.localization.message.Message;
import com.eibus.localization.message.MessageSet;

/**
 * This code is generated by running com.cordys.coe.cep.wizards.localization.CoEMessageGenerator.
 */
public class EmailIOExceptionMessages
{
    /**
     * Holds the definition of the message set.
     */
    public static final MessageSet MESSAGE_SET = MessageSet.getMessageSet("com.cordys.coe.ac.emailio.exception.EmailIOException");

    /**
     * Holds the definition of the message with ID
     * EIOE_COULD_NOT_FIND_THE_MIMEMULTIPART_THAT_IS_SIGNED. Message text: Could not find the
     * MimeMultipart that is signed
     */
    public static final Message EIOE_COULD_NOT_FIND_THE_MIMEMULTIPART_THAT_IS_SIGNED = MESSAGE_SET
                                                                                       .getMessage("EIOE_COULD_NOT_FIND_THE_MIMEMULTIPART_THAT_IS_SIGNED");
    /**
     * Holds the definition of the message with ID
     * EIOE_VALIDATION_OF_THE_SIGNATURE_FOR_CERTIFICATE_0_FAILED. Message text: Validation of the
     * signature for certificate {0} failed.
     */
    public static final Message EIOE_VALIDATION_OF_THE_SIGNATURE_FOR_CERTIFICATE_0_FAILED = MESSAGE_SET
                                                                                            .getMessage("EIOE_VALIDATION_OF_THE_SIGNATURE_FOR_CERTIFICATE_0_FAILED");
    /**
     * Holds the definition of the message with ID
     * EIOE_COULD_NOT_DECRYPT_MESSAGE_BECAUSE_NO_RECIPIENT_INFORMATION_WAS_FOUND. Message text:
     * Could not decrypt message because no recipient information was found
     */
    public static final Message EIOE_COULD_NOT_DECRYPT_MESSAGE_BECAUSE_NO_RECIPIENT_INFORMATION_WAS_FOUND = MESSAGE_SET
                                                                                                            .getMessage("EIOE_COULD_NOT_DECRYPT_MESSAGE_BECAUSE_NO_RECIPIENT_INFORMATION_WAS_FOUND");
    /**
     * Holds the definition of the message with ID
     * EIOE_COULD_NOT_FIND_ANY_CERTIFICATE_INFORMATION_FOR_ANY_OF_THE_RECIPIENTS. Message text:
     * Could not decrypt message. Could not find any certificate information for any of the
     * recipients.
     */
    public static final Message EIOE_COULD_NOT_FIND_ANY_CERTIFICATE_INFORMATION_FOR_ANY_OF_THE_RECIPIENTS = MESSAGE_SET
                                                                                                            .getMessage("EIOE_COULD_NOT_FIND_ANY_CERTIFICATE_INFORMATION_FOR_ANY_OF_THE_RECIPIENTS");
    /**
     * Holds the definition of the message with ID
     * EIOE_COULD_NOT_FIND_A_PRIVATE_KEY_FOR_RECIPIENT_0. Message text: Could not find a private key
     * for recipient {0}
     */
    public static final Message EIOE_COULD_NOT_FIND_A_PRIVATE_KEY_FOR_RECIPIENT_0 = MESSAGE_SET
                                                                                    .getMessage("EIOE_COULD_NOT_FIND_A_PRIVATE_KEY_FOR_RECIPIENT_0");
    /**
     * Holds the definition of the message with ID EIOE_COULD_NOT_VALIDATE_SIGNATURE. Message text:
     * Could not validate signature
     */
    public static final Message EIOE_COULD_NOT_VALIDATE_SIGNATURE = MESSAGE_SET.getMessage("EIOE_COULD_NOT_VALIDATE_SIGNATURE");
    /**
     * Holds the definition of the message with ID EIOE_ERROR_CHECKING_IF_THE_MAIL_IS_ENCRYPTED.
     * Message text: Error checking if the mail is encrypted.
     */
    public static final Message EIOE_ERROR_CHECKING_IF_THE_MAIL_IS_ENCRYPTED = MESSAGE_SET
                                                                               .getMessage("EIOE_ERROR_CHECKING_IF_THE_MAIL_IS_ENCRYPTED");
    /**
     * Holds the definition of the message with ID EIOE_ERROR_CHECKING_IF_THE_MAIL_IS_SIGNED.
     * Message text: Error checking if the mail is signed
     */
    public static final Message EIOE_ERROR_CHECKING_IF_THE_MAIL_IS_SIGNED = MESSAGE_SET.getMessage("EIOE_ERROR_CHECKING_IF_THE_MAIL_IS_SIGNED");
    /**
     * Holds the definition of the message with ID EIOE_ERROR_DECRYPTING_EMAIL_MESSAGE. Message
     * text: Error decrypting email message
     */
    public static final Message EIOE_ERROR_DECRYPTING_EMAIL_MESSAGE = MESSAGE_SET.getMessage("EIOE_ERROR_DECRYPTING_EMAIL_MESSAGE");
    /**
     * Holds the definition of the message with ID EIOE_INVALID_ACTION_TYPE_0. Message text: Invalid
     * action type: {0}
     */
    public static final Message EIOE_INVALID_ACTION_TYPE_0 = MESSAGE_SET.getMessage("EIOE_INVALID_ACTION_TYPE_0");
    /**
     * Holds the definition of the message with ID
     * EIOE_INVALID_RETURN_TYPE_CANNOT_BUILD_UP_RESPONSE_FOR_RESULT_TYPE_0. Message text: Invalid
     * return type. Cannot build up response for result type {0}
     */
    public static final Message EIOE_INVALID_RETURN_TYPE_CANNOT_BUILD_UP_RESPONSE_FOR_RESULT_TYPE_0 = MESSAGE_SET
                                                                                                      .getMessage("EIOE_INVALID_RETURN_TYPE_CANNOT_BUILD_UP_RESPONSE_FOR_RESULT_TYPE_0");
    /**
     * Holds the definition of the message with ID
     * EIOE_METHOD_0_NOT_SUPPORTED_ONLY_THE_SENDMAIL_METHOD_IS_SUPPORTED. Message text: Method {0}
     * not supported. Only the SendMail method is supported.
     */
    public static final Message EIOE_METHOD_0_NOT_SUPPORTED_ONLY_THE_SENDMAIL_METHOD_IS_SUPPORTED = MESSAGE_SET
                                                                                                    .getMessage("EIOE_METHOD_0_NOT_SUPPORTED_ONLY_THE_SENDMAIL_METHOD_IS_SUPPORTED");
    /**
     * Holds the definition of the message with ID
     * EIOE_THERE_IS_NO_GLOBAL_STORAGE_PROVIDER_THAT_SUPPORTS_THE_MANAGEMENT_INTERFACE. Message
     * text: There is no global storage provider that supports the management interface.
     */
    public static final Message EIOE_THERE_IS_NO_GLOBAL_STORAGE_PROVIDER_THAT_SUPPORTS_THE_MANAGEMENT_INTERFACE = MESSAGE_SET
                                                                                                                  .getMessage("EIOE_THERE_IS_NO_GLOBAL_STORAGE_PROVIDER_THAT_SUPPORTS_THE_MANAGEMENT_INTERFACE");
    /**
     * Holds the definition of the message with ID
     * EIOE_NO_ACTION_FOUND_IN_THE_METHOD_IMPLEMENTATION. Message text: No action found in the
     * method implementation.
     */
    public static final Message EIOE_NO_ACTION_FOUND_IN_THE_METHOD_IMPLEMENTATION = MESSAGE_SET
                                                                                    .getMessage("EIOE_NO_ACTION_FOUND_IN_THE_METHOD_IMPLEMENTATION");
    /**
     * Holds the definition of the message with ID EIOE_MISSING_PARAMETER_SEARCH. Message text:
     * Missing parameter: search
     */
    public static final Message EIOE_MISSING_PARAMETER_SEARCH = MESSAGE_SET.getMessage("EIOE_MISSING_PARAMETER_SEARCH");
    /**
     * Holds the definition of the message with ID EIOE_MISSING_PARAMETER_ARCHIVER. Message text:
     * Missing parameter: archiver
     */
    public static final Message EIOE_MISSING_PARAMETER_ARCHIVER = MESSAGE_SET.getMessage("EIOE_MISSING_PARAMETER_ARCHIVER");
    /**
     * Holds the definition of the message with ID EIOE_MISSING_PARAMETER_ARCHIVERCLASS. Message
     * text: Missing parameter: archiver/class
     */
    public static final Message EIOE_MISSING_PARAMETER_ARCHIVERCLASS = MESSAGE_SET.getMessage("EIOE_MISSING_PARAMETER_ARCHIVERCLASS");
    /**
     * Holds the definition of the message with ID EIOE_ERROR_RETURNING_THE_CURRENT_CONFIGURATION.
     * Message text: Error returning the current configuration.
     */
    public static final Message EIOE_ERROR_RETURNING_THE_CURRENT_CONFIGURATION = MESSAGE_SET
                                                                                 .getMessage("EIOE_ERROR_RETURNING_THE_CURRENT_CONFIGURATION");
}
