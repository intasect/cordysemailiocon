/**
 * Copyright 2005 Cordys R&D B.V. 
 * 
 * This file is part of the Cordys SAP Connector. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 /**
 * Copyright 2005 Cordys R&D B.V. 
 * 
 * This file is part of the Cordys SAP Connector. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 package com.cordys.coe.ac.emailio.localization;

import com.eibus.localization.message.Message;
import com.eibus.localization.message.MessageSet;

/**
 * This code is generated by running com.cordys.coe.cep.wizards.localization.CoEMessageGenerator.
 */
public class KeyManagerExceptionMessages
{
    /**
     * Holds the definition of the message set.
     */
    public static final MessageSet MESSAGE_SET = MessageSet.getMessageSet("com.cordys.coe.ac.emailio.exception.KeyManagerException");

    /**
     * Holds the definition of the message with ID
     * KME_ERROR_GETTING_THE_KEY_DETAILS_FROM_LDAP_FOR_EMAIL_ADDRESS_0. Message text: Error getting
     * the key details from LDAP for email address {0}
     */
    public static final Message KME_ERROR_GETTING_THE_KEY_DETAILS_FROM_LDAP_FOR_EMAIL_ADDRESS_0 = MESSAGE_SET
                                                                                                  .getMessage("KME_ERROR_GETTING_THE_KEY_DETAILS_FROM_LDAP_FOR_EMAIL_ADDRESS_0");
    /**
     * Holds the definition of the message with ID KME_ERROR_INSTANTIATING_CLASS. Message text:
     * Error instantiating class {0}
     */
    public static final Message KME_ERROR_INSTANTIATING_CLASS = MESSAGE_SET.getMessage("KME_ERROR_INSTANTIATING_CLASS");
    /**
     * Holds the definition of the message with ID
     * KME_ERROR_LOADING_X509_CERTIFICATE_FROM_THE_STREAM. Message text: Error loading X.509
     * certificate from the stream.
     */
    public static final Message KME_ERROR_LOADING_X509_CERTIFICATE_FROM_THE_STREAM = MESSAGE_SET
                                                                                     .getMessage("KME_ERROR_LOADING_X509_CERTIFICATE_FROM_THE_STREAM");
    /**
     * Holds the definition of the message with ID
     * KME_ERROR_SETTING_THE_ISSUER_FOR_CERTIFICATE_WITH_SUBJECT_0. Message text: Error setting the
     * issuer for certificate with subject {0}
     */
    public static final Message KME_ERROR_SETTING_THE_ISSUER_FOR_CERTIFICATE_WITH_SUBJECT_0 = MESSAGE_SET
                                                                                              .getMessage("KME_ERROR_SETTING_THE_ISSUER_FOR_CERTIFICATE_WITH_SUBJECT_0");
    /**
     * Holds the definition of the message with ID KME_THE_CLASS_DOES_NOT_IMPLEMENT_INTERFACE.
     * Message text: The class {0} does not implement {1}
     */
    public static final Message KME_THE_CLASS_DOES_NOT_IMPLEMENT_INTERFACE = MESSAGE_SET.getMessage("KME_THE_CLASS_DOES_NOT_IMPLEMENT_INTERFACE");
    /**
     * Holds the definition of the message with ID KME_COULD_NOT_LOAD_CLASS. Message text: Could not
     * load class {0}
     */
    public static final Message KME_COULD_NOT_LOAD_CLASS = MESSAGE_SET.getMessage("KME_COULD_NOT_LOAD_CLASS");
    /**
     * Holds the definition of the message with ID
     * KME_ERROR_CREATING_KEYSTORE_OF_TYPE_0_FOR_PROVIDER_1. Message text: Error creating keystore
     * of type {0} for provider {1}
     */
    public static final Message KME_ERROR_CREATING_KEYSTORE_OF_TYPE_0_FOR_PROVIDER_1 = MESSAGE_SET
                                                                                       .getMessage("KME_ERROR_CREATING_KEYSTORE_OF_TYPE_0_FOR_PROVIDER_1");
    /**
     * Holds the definition of the message with ID
     * KME_ERROR_GETTING_ALL_CERTIFICATES_IN_THE_KEYSTORE. Message text: Error getting all
     * certificates in the keystore.
     */
    public static final Message KME_ERROR_GETTING_ALL_CERTIFICATES_IN_THE_KEYSTORE = MESSAGE_SET
                                                                                     .getMessage("KME_ERROR_GETTING_ALL_CERTIFICATES_IN_THE_KEYSTORE");
    /**
     * Holds the definition of the message with ID KME_ERROR_LOADING_THE_KEYSTORE_0. Message text:
     * Error loading the keystore {0}
     */
    public static final Message KME_ERROR_LOADING_THE_KEYSTORE_0 = MESSAGE_SET.getMessage("KME_ERROR_LOADING_THE_KEYSTORE_0");
    /**
     * Holds the definition of the message with ID KME_THE_BOUNCY_CASTLE_PROVIDER_WAS_NOT_FOUND.
     * Message text: The bouncy castle provider was not found.
     */
    public static final Message KME_THE_BOUNCY_CASTLE_PROVIDER_WAS_NOT_FOUND = MESSAGE_SET
                                                                               .getMessage("KME_THE_BOUNCY_CASTLE_PROVIDER_WAS_NOT_FOUND");
    /**
     * Holds the definition of the message with ID KME_KEYSTORE_0_COULD_NOT_BE_FOUND. Message text:
     * Keystore {0} could not be found.
     */
    public static final Message KME_KEYSTORE_0_COULD_NOT_BE_FOUND = MESSAGE_SET.getMessage("KME_KEYSTORE_0_COULD_NOT_BE_FOUND");
    /**
     * Holds the definition of the message with ID KME_KEYSTORE_MUST_BE_PRESENT. Message text:
     * Keystore must be present.
     */
    public static final Message KME_KEYSTORE_MUST_BE_PRESENT = MESSAGE_SET.getMessage("KME_KEYSTORE_MUST_BE_PRESENT");
}
