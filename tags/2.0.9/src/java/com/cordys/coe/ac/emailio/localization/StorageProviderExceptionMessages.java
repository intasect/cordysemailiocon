

 /**
 * Copyright 2007 Cordys R&D B.V. 
 * 
 * This file is part of the Cordys Email IO Connector. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cordys.coe.ac.emailio.localization;

import com.eibus.localization.message.Message;
import com.eibus.localization.message.MessageSet;

/**
 * This code is generated by running com.cordys.coe.cep.wizards.localization.CoEMessageGenerator.
 */
public class StorageProviderExceptionMessages
{
    /**
     * Holds the definition of the message set.
     */
    public static final MessageSet MESSAGE_SET = MessageSet.getMessageSet("com.cordys.coe.ac.emailio.exception.StorageProviderException");

    /**
     * Holds the definition of the message with ID DPE_COULD_NOT_DESERIALIZE_TRIGGER_0. Message
     * text: Could not deserialize trigger: {0}
     */
    public static final Message DPE_COULD_NOT_DESERIALIZE_TRIGGER_0 = MESSAGE_SET.getMessage("DPE_COULD_NOT_DESERIALIZE_TRIGGER_0");
    /**
     * Holds the definition of the message with ID ERROR_INSTANTIATING_CLASS_0. Message text: Error
     * instantiating class {0}
     */
    public static final Message ERROR_INSTANTIATING_CLASS_0 = MESSAGE_SET.getMessage("ERROR_INSTANTIATING_CLASS_0");
    /**
     * Holds the definition of the message with ID SPE_COULD_NOT_DESERIALIZE_TRIGGER. Message text:
     * Could not deserialize trigger: {0}
     */
    public static final Message SPE_COULD_NOT_DESERIALIZE_TRIGGER = MESSAGE_SET.getMessage("SPE_COULD_NOT_DESERIALIZE_TRIGGER");
    /**
     * Holds the definition of the message with ID SPE_COULD_NOT_FIND_CONTEXT_CONTAINER_WITH_ID_0.
     * Message text: Could not find context container with ID {0}
     */
    public static final Message SPE_COULD_NOT_FIND_CONTEXT_CONTAINER_WITH_ID_0 = MESSAGE_SET
                                                                                 .getMessage("SPE_COULD_NOT_FIND_CONTEXT_CONTAINER_WITH_ID_0");
    /**
     * Holds the definition of the message with ID SPE_COULD_NOT_FIND_EMAIL_WITH_ID_0_1. Message
     * text: Could not find email with ID {0} ({1})
     */
    public static final Message SPE_COULD_NOT_FIND_EMAIL_WITH_ID_0_1 = MESSAGE_SET.getMessage("SPE_COULD_NOT_FIND_EMAIL_WITH_ID_0_1");
    /**
     * Holds the definition of the message with ID
     * SPE_COULD_NOT_FIND_THE_ACTUAL_FOLDERS_FOR_EMAILBOX_0. Message text: Could not find the actual
     * folders for emailbox {0}
     */
    public static final Message SPE_COULD_NOT_FIND_THE_ACTUAL_FOLDERS_FOR_EMAILBOX_0 = MESSAGE_SET
                                                                                       .getMessage("SPE_COULD_NOT_FIND_THE_ACTUAL_FOLDERS_FOR_EMAILBOX_0");
    /**
     * Holds the definition of the message with ID SPE_COULD_NOT_FIND_THE_CLASS_FOR_01. Message
     * text: Could not find the class for {0}:{1}
     */
    public static final Message SPE_COULD_NOT_FIND_THE_CLASS_FOR_01 = MESSAGE_SET.getMessage("SPE_COULD_NOT_FIND_THE_CLASS_FOR_01");
    /**
     * Holds the definition of the message with ID SPE_COULD_NOT_FIND_THE_EMAILBOX_FOR_NAME. Message
     * text: Could not find the emailbox for name {0}
     */
    public static final Message SPE_COULD_NOT_FIND_THE_EMAILBOX_FOR_NAME = MESSAGE_SET.getMessage("SPE_COULD_NOT_FIND_THE_EMAILBOX_FOR_NAME");
    /**
     * Holds the definition of the message with ID
     * SPE_COULD_NOT_READ_THE_JAVA_PARAMETER_VALUE_FOR_THIS_PARAMETER. Message text: Could not read
     * the Java parameter value for this parameter:\n{0}
     */
    public static final Message SPE_COULD_NOT_READ_THE_JAVA_PARAMETER_VALUE_FOR_THIS_PARAMETER = MESSAGE_SET
                                                                                                 .getMessage("SPE_COULD_NOT_READ_THE_JAVA_PARAMETER_VALUE_FOR_THIS_PARAMETER");
    /**
     * Holds the definition of the message with ID SPE_EMPTY_STRINGS_CANT_BE_USED_AS_FILE_NAMES.
     * Message text: Empty strings can't be used as file names.
     */
    public static final Message SPE_EMPTY_STRINGS_CANT_BE_USED_AS_FILE_NAMES = MESSAGE_SET
                                                                               .getMessage("SPE_EMPTY_STRINGS_CANT_BE_USED_AS_FILE_NAMES");
    /**
     * Holds the definition of the message with ID
     * SPE_ERROR_CREATING_CONTAINER_XML_DETAILS_FOR_STORAGE_ID_0. Message text: Error creating
     * container XML details for storage ID {0}
     */
    public static final Message SPE_ERROR_CREATING_CONTAINER_XML_DETAILS_FOR_STORAGE_ID_0 = MESSAGE_SET
                                                                                            .getMessage("SPE_ERROR_CREATING_CONTAINER_XML_DETAILS_FOR_STORAGE_ID_0");
    /**
     * Holds the definition of the message with ID SPE_ERROR_CREATING_EMAILBOX_FOR_ID_01. Message
     * text: Error creating emailbox for ID {0}/{1}
     */
    public static final Message SPE_ERROR_CREATING_EMAILBOX_FOR_ID_01 = MESSAGE_SET.getMessage("SPE_ERROR_CREATING_EMAILBOX_FOR_ID_01");
    /**
     * Holds the definition of the message with ID SPE_ERROR_CREATING_METADATA_FILE. Message text:
     * Error creating metadata file {0}
     */
    public static final Message SPE_ERROR_CREATING_METADATA_FILE = MESSAGE_SET.getMessage("SPE_ERROR_CREATING_METADATA_FILE");
    /**
     * Holds the definition of the message with ID SPE_ERROR_EXECUTING_METHOD_SEARCHCONTAINERS.
     * Message text: Error executing method searchContainers
     */
    public static final Message SPE_ERROR_EXECUTING_METHOD_SEARCHCONTAINERS = MESSAGE_SET
                                                                              .getMessage("SPE_ERROR_EXECUTING_METHOD_SEARCHCONTAINERS");
    /**
     * Holds the definition of the message with ID SPE_ERROR_EXECUTING_METHOD_SEARCHEMAILBOXES.
     * Message text: Error executing method searchEmailBoxes
     */
    public static final Message SPE_ERROR_EXECUTING_METHOD_SEARCHEMAILBOXES = MESSAGE_SET
                                                                              .getMessage("SPE_ERROR_EXECUTING_METHOD_SEARCHEMAILBOXES");
    /**
     * Holds the definition of the message with ID
     * SPE_ERROR_EXECUTING_METHOD_SEARCHTRIGGERDEFINITIONS. Message text: Error executing method
     * searchTriggerDefinitions
     */
    public static final Message SPE_ERROR_EXECUTING_METHOD_SEARCHTRIGGERDEFINITIONS = MESSAGE_SET
                                                                                      .getMessage("SPE_ERROR_EXECUTING_METHOD_SEARCHTRIGGERDEFINITIONS");
    /**
     * Holds the definition of the message with ID SPE_ERROR_GETTING_CONTAINER_WITH_ID. Message
     * text: Error getting container with ID {0}
     */
    public static final Message SPE_ERROR_GETTING_CONTAINER_WITH_ID = MESSAGE_SET.getMessage("SPE_ERROR_GETTING_CONTAINER_WITH_ID");
    /**
     * Holds the definition of the message with ID SPE_ERROR_GETTING_TRIGGER_DEFINITION_WITH_ID_0.
     * Message text: Error getting trigger definition with ID {0}
     */
    public static final Message SPE_ERROR_GETTING_TRIGGER_DEFINITION_WITH_ID_0 = MESSAGE_SET
                                                                                 .getMessage("SPE_ERROR_GETTING_TRIGGER_DEFINITION_WITH_ID_0");
    /**
     * Holds the definition of the message with ID SPE_ERROR_PERSISTING_TRIGGER_WITH_NAME_0. Message
     * text: Error persisting trigger with name {0}
     */
    public static final Message SPE_ERROR_PERSISTING_TRIGGER_WITH_NAME_0 = MESSAGE_SET.getMessage("SPE_ERROR_PERSISTING_TRIGGER_WITH_NAME_0");
    /**
     * Holds the definition of the message with ID SPE_ERROR_READING_EML_FILE. Message text: Error
     * reading .eml file {0}
     */
    public static final Message SPE_ERROR_READING_EML_FILE = MESSAGE_SET.getMessage("SPE_ERROR_READING_EML_FILE");
    /**
     * Holds the definition of the message with ID
     * SPE_ERROR_RELOADING_DYNAMIC_TRIGGERS_FROM_THE_DATABASE. Message text: Error reloading dynamic
     * triggers from the database
     */
    public static final Message SPE_ERROR_RELOADING_DYNAMIC_TRIGGERS_FROM_THE_DATABASE = MESSAGE_SET
                                                                                         .getMessage("SPE_ERROR_RELOADING_DYNAMIC_TRIGGERS_FROM_THE_DATABASE");
    /**
     * Holds the definition of the message with ID SPE_ERROR_REMOVING_CONTAINER_0_FROM_THE_DATABASE.
     * Message text: Error removing container {0} from the database.
     */
    public static final Message SPE_ERROR_REMOVING_CONTAINER_0_FROM_THE_DATABASE = MESSAGE_SET
                                                                                   .getMessage("SPE_ERROR_REMOVING_CONTAINER_0_FROM_THE_DATABASE");
    /**
     * Holds the definition of the message with ID
     * SPE_ERROR_REMOVING_THE_TRIGGER_FROM_THE_PERSISTENCE_LAYER. Message text: Error removing the
     * trigger from the persistence layer.
     */
    public static final Message SPE_ERROR_REMOVING_THE_TRIGGER_FROM_THE_PERSISTENCE_LAYER = MESSAGE_SET
                                                                                            .getMessage("SPE_ERROR_REMOVING_THE_TRIGGER_FROM_THE_PERSISTENCE_LAYER");
    /**
     * Holds the definition of the message with ID SPE_ERROR_STORING_THE_EMAIL_CONTENT. Message
     * text: Error storing the email content
     */
    public static final Message SPE_ERROR_STORING_THE_EMAIL_CONTENT = MESSAGE_SET.getMessage("SPE_ERROR_STORING_THE_EMAIL_CONTENT");
    /**
     * Holds the definition of the message with ID SPE_ERROR_STORING_THE_RULE_CONTEXT_CONTAINER.
     * Message text: Error storing the rule context container.
     */
    public static final Message SPE_ERROR_STORING_THE_RULE_CONTEXT_CONTAINER = MESSAGE_SET
                                                                               .getMessage("SPE_ERROR_STORING_THE_RULE_CONTEXT_CONTAINER");
    /**
     * Holds the definition of the message with ID
     * SPE_ERROR_UPDATING_THE_STATUS_OF_CONTAINER_TO_STATUS. Message text: Error updating the status
     * of container {0} to status {1}
     */
    public static final Message SPE_ERROR_UPDATING_THE_STATUS_OF_CONTAINER_TO_STATUS = MESSAGE_SET
                                                                                       .getMessage("SPE_ERROR_UPDATING_THE_STATUS_OF_CONTAINER_TO_STATUS");
    /**
     * Holds the definition of the message with ID SPE_ERROR_WRITING_EMAIL_TO_FILE_0. Message text:
     * Error writing email to file {0}
     */
    public static final Message SPE_ERROR_WRITING_EMAIL_TO_FILE_0 = MESSAGE_SET.getMessage("SPE_ERROR_WRITING_EMAIL_TO_FILE_0");
    /**
     * Holds the definition of the message with ID SPE_THERE_ARE_NO_EMAIL_MESSAGES_FOR_STORAGE_ID_0.
     * Message text: There are no email messages for storage ID {0}
     */
    public static final Message SPE_THERE_ARE_NO_EMAIL_MESSAGES_FOR_STORAGE_ID_0 = MESSAGE_SET
                                                                                   .getMessage("SPE_THERE_ARE_NO_EMAIL_MESSAGES_FOR_STORAGE_ID_0");
    /**
     * Holds the definition of the message with ID SPE_THE_CLASS_DOES_NOT_IMPLEMENT_INTERFACE.
     * Message text: The class {0} does not implement interface {1}
     */
    public static final Message SPE_THE_CLASS_DOES_NOT_IMPLEMENT_INTERFACE = MESSAGE_SET.getMessage("SPE_THE_CLASS_DOES_NOT_IMPLEMENT_INTERFACE");
    /**
     * Holds the definition of the message with ID SPE_COULD_NOT_LOAD_CLASS. Message text: Could not
     * load class {0}
     */
    public static final Message SPE_COULD_NOT_LOAD_CLASS = MESSAGE_SET.getMessage("SPE_COULD_NOT_LOAD_CLASS");
    /**
     * Holds the definition of the message with ID
     * SPE_COULD_NOT_FIND_THE_DATABASE_CONNECTION_POOL_CONFIGURATION. Message text: Could not find
     * the database connection pool configuration
     */
    public static final Message SPE_COULD_NOT_FIND_THE_DATABASE_CONNECTION_POOL_CONFIGURATION = MESSAGE_SET
                                                                                                .getMessage("SPE_COULD_NOT_FIND_THE_DATABASE_CONNECTION_POOL_CONFIGURATION");
    /**
     * Holds the definition of the message with ID
     * SPE_ERROR_CREATING_DATABASE_CONFIGURATION_FOR_EMBEDDED_WSAPPSERVER. Message text: Error
     * creating database configuration for embedded WsApp-Server
     */
    public static final Message SPE_ERROR_CREATING_DATABASE_CONFIGURATION_FOR_EMBEDDED_WSAPPSERVER = MESSAGE_SET
                                                                                                     .getMessage("SPE_ERROR_CREATING_DATABASE_CONFIGURATION_FOR_EMBEDDED_WSAPPSERVER");
    /**
     * Holds the definition of the message with ID
     * SPE_COULD_NOT_CREATE_THE_PROPER_WSAPPSERVER_CONTEXT. Message text: Could not create the
     * proper WsApp-Server context
     */
    public static final Message SPE_COULD_NOT_CREATE_THE_PROPER_WSAPPSERVER_CONTEXT = MESSAGE_SET
                                                                                      .getMessage("SPE_COULD_NOT_CREATE_THE_PROPER_WSAPPSERVER_CONTEXT");
    /**
     * Holds the definition of the message with ID SPE_COULD_NOT_FIND_THE_METADATA_FILE. Message
     * text: Could not find the metadata file {0}
     */
    public static final Message SPE_COULD_NOT_FIND_THE_METADATA_FILE = MESSAGE_SET.getMessage("SPE_COULD_NOT_FIND_THE_METADATA_FILE");
    /**
     * Holds the definition of the message with ID
     * SPE_COULD_NOT_FIND_THE_STORAGE_ID_0_IN_THE_FOLDER_1_OR_IN_THE_FOLDER_2. Message text: Could
     * not find the storage id {0} in the folder {1} or in the folder {2}
     */
    public static final Message SPE_COULD_NOT_FIND_THE_STORAGE_ID_0_IN_THE_FOLDER_1_OR_IN_THE_FOLDER_2 = MESSAGE_SET
                                                                                                         .getMessage("SPE_COULD_NOT_FIND_THE_STORAGE_ID_0_IN_THE_FOLDER_1_OR_IN_THE_FOLDER_2");
    /**
     * Holds the definition of the message with ID
     * SPE_ERROR_SETTING_THE_STATUS_OF_CONTAINER_TO_IN_PROGRESS. Message text: Error setting the
     * status of container {0} to in progress
     */
    public static final Message SPE_ERROR_SETTING_THE_STATUS_OF_CONTAINER_TO_IN_PROGRESS = MESSAGE_SET
                                                                                           .getMessage("SPE_ERROR_SETTING_THE_STATUS_OF_CONTAINER_TO_IN_PROGRESS");
    /**
     * Holds the definition of the message with ID SPE_THE_EMAIL_WITH_INDEX_0_DOES_NOT_EXIST.
     * Message text: The email with index {0} does not exist ({1})
     */
    public static final Message SPE_THE_EMAIL_WITH_INDEX_0_DOES_NOT_EXIST = MESSAGE_SET.getMessage("SPE_THE_EMAIL_WITH_INDEX_0_DOES_NOT_EXIST");
}
