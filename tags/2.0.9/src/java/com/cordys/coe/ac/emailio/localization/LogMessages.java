package com.cordys.coe.ac.emailio.localization;

import com.eibus.localization.message.Message;
import com.eibus.localization.message.MessageSet;

/**
 * This code is generated by running com.cordys.coe.cep.wizards.localization.CoEMessageGenerator.
 */
public class LogMessages
{
	/**
	 * Holds the definition of the message set.
	 */
	public static final MessageSet MESSAGE_SET = MessageSet.getMessageSet("com.cordys.coe.ac.emailio.Messages");

	/**
	 * Holds the definition of the message with ID ERROR_COMPRESSING_THE_ORIGINAL_DATA_WILL_STORE_THE_DATA_UNCOMPRESSED.
	 * Message text:
	 * Error compressing the original data. Will store the data uncompressed.
	 */
	public static final Message ERROR_COMPRESSING_THE_ORIGINAL_DATA_WILL_STORE_THE_DATA_UNCOMPRESSED = MESSAGE_SET.getMessage("ERROR_COMPRESSING_THE_ORIGINAL_DATA_WILL_STORE_THE_DATA_UNCOMPRESSED");
	/**
	 * Holds the definition of the message with ID ERROR_DECOMPRESSING_THE_DATA_TO_ORIGINAL_FORMAT.
	 * Message text:
	 * Error decompressing the data to original format. Returning the compressed data.
	 */
	public static final Message ERROR_DECOMPRESSING_THE_DATA_TO_ORIGINAL_FORMAT = MESSAGE_SET.getMessage("ERROR_DECOMPRESSING_THE_DATA_TO_ORIGINAL_FORMAT");
	/**
	 * Holds the definition of the message with ID ERROR_INITIALIZING_THE_WSAPPSERVER_UTIL_CLASS.
	 * Message text:
	 * Error initializing the WS-AppServer util class
	 */
	public static final Message ERROR_INITIALIZING_THE_WSAPPSERVER_UTIL_CLASS = MESSAGE_SET.getMessage("ERROR_INITIALIZING_THE_WSAPPSERVER_UTIL_CLASS");
	/**
	 * Holds the definition of the message with ID ERROR_LOADING_PERSISTENT_TRIGGER.
	 * Message text:
	 * Error loading persistent trigger {0}
	 */
	public static final Message ERROR_LOADING_PERSISTENT_TRIGGER = MESSAGE_SET.getMessage("ERROR_LOADING_PERSISTENT_TRIGGER");
	/**
	 * Holds the definition of the message with ID ERROR_STORING_THE_CONTEXT_IN_THE_STORAGE_PROVIDER.
	 * Message text:
	 * Error storing the context in the storage provider
	 */
	public static final Message ERROR_STORING_THE_CONTEXT_IN_THE_STORAGE_PROVIDER = MESSAGE_SET.getMessage("ERROR_STORING_THE_CONTEXT_IN_THE_STORAGE_PROVIDER");
	/**
	 * Holds the definition of the message with ID ERROR_UPDATING_THE_STATUS_IN_THE_STORAGE_LAYER.
	 * Message text:
	 * Error updating the status in the storage layer
	 */
	public static final Message ERROR_UPDATING_THE_STATUS_IN_THE_STORAGE_LAYER = MESSAGE_SET.getMessage("ERROR_UPDATING_THE_STATUS_IN_THE_STORAGE_LAYER");
	/**
	 * Holds the definition of the message with ID ERROR_STORING_THE_ERROR_WHEN_UNSUPPORTED_ENCODING.
	 * Message text:
	 * Error storing the error mail in the error folder and removing it from the email box. Some email data:
	 * From: {0}
	 * Sent date:{1}
	 * Received date: {2}
	 */
	public static final Message ERROR_STORING_THE_ERROR_WHEN_UNSUPPORTED_ENCODING = MESSAGE_SET.getMessage("ERROR_STORING_THE_ERROR_WHEN_UNSUPPORTED_ENCODING");
	/**
	 * Holds the definition of the message with ID ERR_ERROR_ROLING_BACK_THE_ARCHIVING_OF_CONTAINER_WITH_ID_0.
	 * Message text:
	 * Error roling back the archiving of container with ID {0}
	 */
	public static final Message ERR_ERROR_ROLING_BACK_THE_ARCHIVING_OF_CONTAINER_WITH_ID_0 = MESSAGE_SET.getMessage("ERR_ERROR_ROLING_BACK_THE_ARCHIVING_OF_CONTAINER_WITH_ID_0");
	/**
	 * Holds the definition of the message with ID ERR_THE_DB_LAYER_IS_USING_COMPRESSION_SO_THE_LIKE_FILTERS_ON_STATUS_INFORMATION_AND_TRIGGER_DEFINITION_DO_NOT_WORK.
	 * Message text:
	 * The DB layer is using compression, so the like filters on status information and trigger definition do not work.
	 */
	public static final Message ERR_THE_DB_LAYER_IS_USING_COMPRESSION_SO_THE_LIKE_FILTERS_ON_STATUS_INFORMATION_AND_TRIGGER_DEFINITION_DO_NOT_WORK = MESSAGE_SET.getMessage("ERR_THE_DB_LAYER_IS_USING_COMPRESSION_SO_THE_LIKE_FILTERS_ON_STATUS_INFORMATION_AND_TRIGGER_DEFINITION_DO_NOT_WORK");
	/**
	 * Holds the definition of the message with ID ERR_THE_DB_LAYER_IS_USING_COMPRESSION_SO_THE_LIKE_FILTER_ON_CONFIGURATION_WILL_NOT_WORK.
	 * Message text:
	 * The DB layer is using compression, so the like filter on configuration will not work
	 */
	public static final Message ERR_THE_DB_LAYER_IS_USING_COMPRESSION_SO_THE_LIKE_FILTER_ON_CONFIGURATION_WILL_NOT_WORK = MESSAGE_SET.getMessage("ERR_THE_DB_LAYER_IS_USING_COMPRESSION_SO_THE_LIKE_FILTER_ON_CONFIGURATION_WILL_NOT_WORK");
	/**
	 * Holds the definition of the message with ID ERR_THE_DB_LAYER_IS_USING_COMPRESSION_SO_THE_LIKE_FILTER_ON_THE_DEFINITION_WILL_NOT_WORK.
	 * Message text:
	 * The DB layer is using compression, so the like filter on the definition will not work.
	 */
	public static final Message ERR_THE_DB_LAYER_IS_USING_COMPRESSION_SO_THE_LIKE_FILTER_ON_THE_DEFINITION_WILL_NOT_WORK = MESSAGE_SET.getMessage("ERR_THE_DB_LAYER_IS_USING_COMPRESSION_SO_THE_LIKE_FILTER_ON_THE_DEFINITION_WILL_NOT_WORK");
	/**
	 * Holds the definition of the message with ID INF_MAILJAR_LOCATION_0NJAR_DETAILSN1.
	 * Message text:
	 * mail.jar location: {0}
	 * Jar details:
	 * {1}
	 */
	public static final Message INF_MAILJAR_LOCATION_0NJAR_DETAILSN1 = MESSAGE_SET.getMessage("INF_MAILJAR_LOCATION_0NJAR_DETAILSN1");
	/**
	 * Holds the definition of the message with ID JMX_SC_SMTP_CONNECTION_POOL.
	 * Message text:
	 * This component shows the details for the SMTP connection pool.
	 */
	public static final Message JMX_SC_SMTP_CONNECTION_POOL = MESSAGE_SET.getMessage("JMX_SC_SMTP_CONNECTION_POOL");
	/**
	 * Holds the definition of the message with ID JMX_VC_SMTP_CONNECTION_POOL.
	 * Message text:
	 * Holds whether or not this connection will use a real connection pool.
	 */
	public static final Message JMX_VC_SMTP_CONNECTION_POOL = MESSAGE_SET.getMessage("JMX_VC_SMTP_CONNECTION_POOL");
	/**
	 * Holds the definition of the message with ID JMX_VC_SMTP_CONN_TIMEOUT.
	 * Message text:
	 * Holds the timeout for the connection to the SMTP server
	 */
	public static final Message JMX_VC_SMTP_CONN_TIMEOUT = MESSAGE_SET.getMessage("JMX_VC_SMTP_CONN_TIMEOUT");
	/**
	 * Holds the definition of the message with ID JMX_VC_SMTP_MAX_CONN.
	 * Message text:
	 * Holds the maximum number of connections that will be in the connection pool
	 */
	public static final Message JMX_VC_SMTP_MAX_CONN = MESSAGE_SET.getMessage("JMX_VC_SMTP_MAX_CONN");
	/**
	 * Holds the definition of the message with ID JMX_VC_SMTP_NAME.
	 * Message text:
	 * The internal name of the SMTP server
	 */
	public static final Message JMX_VC_SMTP_NAME = MESSAGE_SET.getMessage("JMX_VC_SMTP_NAME");
	/**
	 * Holds the definition of the message with ID JMX_VC_SMTP_HOST.
	 * Message text:
	 * The host name of the SMTP server
	 */
	public static final Message JMX_VC_SMTP_HOST = MESSAGE_SET.getMessage("JMX_VC_SMTP_HOST");
	/**
	 * Holds the definition of the message with ID JMX_VC_SMTP_PORT.
	 * Message text:
	 * The port number of the SMTP server
	 */
	public static final Message JMX_VC_SMTP_PORT = MESSAGE_SET.getMessage("JMX_VC_SMTP_PORT");
	/**
	 * Holds the definition of the message with ID JMX_VC_SMTP_SSL.
	 * Message text:
	 * Holds whether or not the SMTP server is using SSL
	 */
	public static final Message JMX_VC_SMTP_SSL = MESSAGE_SET.getMessage("JMX_VC_SMTP_SSL");
	/**
	 * Holds the definition of the message with ID JMX_VC_SMTP_USERNAME.
	 * Message text:
	 * The username for the SMTP server
	 */
	public static final Message JMX_VC_SMTP_USERNAME = MESSAGE_SET.getMessage("JMX_VC_SMTP_USERNAME");
	/**
	 * Holds the definition of the message with ID OPERATION_NOT_SUPPORTED.
	 * Message text:
	 * Operation {0} not supported
	 */
	public static final Message OPERATION_NOT_SUPPORTED = MESSAGE_SET.getMessage("OPERATION_NOT_SUPPORTED");
	/**
	 * Holds the definition of the message with ID WARN_DEFAULT_MEMORY_TRIGGER_STORE_USED_AS_NO_TRIGGER_STORE_CONFIGURATION_WAS_FOUND_FOR_EMAILBOX_0.
	 * Message text:
	 * Default memory trigger store used as no trigger store configuration was found for EMailBox {0}
	 */
	public static final Message WARN_DEFAULT_MEMORY_TRIGGER_STORE_USED_AS_NO_TRIGGER_STORE_CONFIGURATION_WAS_FOUND_FOR_EMAILBOX_0 = MESSAGE_SET.getMessage("WARN_DEFAULT_MEMORY_TRIGGER_STORE_USED_AS_NO_TRIGGER_STORE_CONFIGURATION_WAS_FOUND_FOR_EMAILBOX_0");
	/**
	 * Holds the definition of the message with ID WRN_CANNOT_SET_USECOMPRESSION_TO_0_BECAUSE_IT_IS_ALREADY_SET_GLOBALLY.
	 * Message text:
	 * Cannot set 'useCompression' to {0} because it is already set using the property {1}. The global value is: {2}
	 */
	public static final Message WRN_CANNOT_SET_USECOMPRESSION_TO_0_BECAUSE_IT_IS_ALREADY_SET_GLOBALLY = MESSAGE_SET.getMessage("WRN_CANNOT_SET_USECOMPRESSION_TO_0_BECAUSE_IT_IS_ALREADY_SET_GLOBALLY");
	/**
	 * Holds the definition of the message with ID WRN_COULD_NOT_DETERMINE_THE_SMIME_TYPE_BASED_ON_THE_CONTENT_TYPE_0.
	 * Message text:
	 * Could not determine the S/MIME type based on the content type: {0}
	 */
	public static final Message WRN_COULD_NOT_DETERMINE_THE_SMIME_TYPE_BASED_ON_THE_CONTENT_TYPE_0 = MESSAGE_SET.getMessage("WRN_COULD_NOT_DETERMINE_THE_SMIME_TYPE_BASED_ON_THE_CONTENT_TYPE_0");
	/**
	 * Holds the definition of the message with ID WRN_COULD_NOT_DETERMINE_THE_VERSION_OF_THE_JAVAMAILAPI_BEING_USED.
	 * Message text:
	 * Could not determine the version of the JavaMailAPI being used.
	 */
	public static final Message WRN_COULD_NOT_DETERMINE_THE_VERSION_OF_THE_JAVAMAILAPI_BEING_USED = MESSAGE_SET.getMessage("WRN_COULD_NOT_DETERMINE_THE_VERSION_OF_THE_JAVAMAILAPI_BEING_USED");
	/**
	 * Holds the definition of the message with ID WRN_NO_STORAGE_CONFIGURED_USING_THE_DEFAULT_STORAGE.
	 * Message text:
	 * No storage configured. Using the default storage.
	 */
	public static final Message WRN_NO_STORAGE_CONFIGURED_USING_THE_DEFAULT_STORAGE = MESSAGE_SET.getMessage("WRN_NO_STORAGE_CONFIGURED_USING_THE_DEFAULT_STORAGE");
	/**
	 * Holds the definition of the message with ID WRN_SINCE_THE_SMTP_SERVER_0_REQUIRES_AUTHENTICATION_A_CONNECTION_POOL_CANNOT_BE_USED.
	 * Message text:
	 * Since the SMTP server ({0}) requires authentication a connection pool cannot be used.
	 */
	public static final Message WRN_SINCE_THE_SMTP_SERVER_0_REQUIRES_AUTHENTICATION_A_CONNECTION_POOL_CANNOT_BE_USED = MESSAGE_SET.getMessage("WRN_SINCE_THE_SMTP_SERVER_0_REQUIRES_AUTHENTICATION_A_CONNECTION_POOL_CANNOT_BE_USED");
	/**
	 * Holds the definition of the message with ID WRN_THE_CONFIGURATION_IS_INVALID_THE_TAG_FIELD_SHOULD_BE_MOVED_TO_CUSTOMFIELD.
	 * Message text:
	 * The configuration is invalid. The tag field should be moved to custom/field.
	 */
	public static final Message WRN_THE_CONFIGURATION_IS_INVALID_THE_TAG_FIELD_SHOULD_BE_MOVED_TO_CUSTOMFIELD = MESSAGE_SET.getMessage("WRN_THE_CONFIGURATION_IS_INVALID_THE_TAG_FIELD_SHOULD_BE_MOVED_TO_CUSTOMFIELD");
	/**
	 * Holds the definition of the message with ID WRN_UNABLE_TO_PROCESS_MESSAGE.
	 * Message text:
	 * Trigger {0} cannot process the email because of an exception.
	 * The exception message: {1}
	 * The email details:
	 * {2}
	 */
	public static final Message WRN_UNABLE_TO_PROCESS_MESSAGE = MESSAGE_SET.getMessage("WRN_UNABLE_TO_PROCESS_MESSAGE");
	/**
	 * Holds the definition of the message with ID connectorManagementDescription.
	 * Message text:
	 * Email IO Connector connector
	 */
	public static final Message CONNECTOR_MANAGEMENT_DESCRIPTION = MESSAGE_SET.getMessage("connectorManagementDescription");
	/**
	 * Holds the definition of the message with ID coelibVersionMismatch.
	 * Message text:
	 * Coelib version mismatch.
	 */
	public static final Message COELIB_VERSION_MISMATCH = MESSAGE_SET.getMessage("coelibVersionMismatch");
	/**
	 * Holds the definition of the message with ID connectorStarting.
	 * Message text:
	 * Starting Email IO Connector.
	 * System Information:
	 * {0}
	 */
	public static final Message CONNECTOR_STARTING = MESSAGE_SET.getMessage("connectorStarting");
	/**
	 * Holds the definition of the message with ID connectorStarted.
	 * Message text:
	 * Email IO Connector connector started.
	 */
	public static final Message CONNECTOR_STARTED = MESSAGE_SET.getMessage("connectorStarted");
	/**
	 * Holds the definition of the message with ID connectorStartException.
	 * Message text:
	 * An error occurred while starting the Email IO Connector connector.
	 */
	public static final Message CONNECTOR_START_EXCEPTION = MESSAGE_SET.getMessage("connectorStartException");
	/**
	 * Holds the definition of the message with ID connectorStopped.
	 * Message text:
	 * Email IO Connector connector stopped.
	 */
	public static final Message CONNECTOR_STOPPED = MESSAGE_SET.getMessage("connectorStopped");
	/**
	 * Holds the definition of the message with ID connectorReset.
	 * Message text:
	 * Resetting Email IO Connector connector
	 */
	public static final Message CONNECTOR_RESET = MESSAGE_SET.getMessage("connectorReset");
	/**
	 * Holds the definition of the message with ID transactionAbort.
	 * Message text:
	 * Aborted the transaction.
	 */
	public static final Message TRANSACTION_ABORT = MESSAGE_SET.getMessage("transactionAbort");
	/**
	 * Holds the definition of the message with ID transactionCommit.
	 * Message text:
	 * Committed the transaction.
	 */
	public static final Message TRANSACTION_COMMIT = MESSAGE_SET.getMessage("transactionCommit");
	/**
	 * Holds the definition of the message with ID transactionError.
	 * Message text:
	 * An error occurred while processing the SOAP request: {0}
	 */
	public static final Message TRANSACTION_ERROR = MESSAGE_SET.getMessage("transactionError");
	/**
	 * Holds the definition of the message with ID ERR_MET_SLEEP.
	 * Message text:
	 * Error while sleeping for email box {0}
	 */
	public static final Message ERR_MET_SLEEP = MESSAGE_SET.getMessage("ERR_MET_SLEEP");
	/**
	 * Holds the definition of the message with ID ERR_MET_EXCEPTION_WATCHING.
	 * Message text:
	 * Error while watching email box {0}
	 */
	public static final Message ERR_MET_EXCEPTION_WATCHING = MESSAGE_SET.getMessage("ERR_MET_EXCEPTION_WATCHING");
	/**
	 * Holds the definition of the message with ID ERR_MET_FATAL_WATCHING.
	 * Message text:
	 * Fatal error while watching email box {0}
	 */
	public static final Message ERR_MET_FATAL_WATCHING = MESSAGE_SET.getMessage("ERR_MET_FATAL_WATCHING");
	/**
	 * Holds the definition of the message with ID ERR_MET_HANDLING_MESSAGES.
	 * Message text:
	 * Error handling messages for folder {0}
	 */
	public static final Message ERR_MET_HANDLING_MESSAGES = MESSAGE_SET.getMessage("ERR_MET_HANDLING_MESSAGES");
	/**
	 * Holds the definition of the message with ID ERR_MET_HANDLING_TRIGGER.
	 * Message text:
	 * Error handling trigger {0} on folder {1}
	 */
	public static final Message ERR_MET_HANDLING_TRIGGER = MESSAGE_SET.getMessage("ERR_MET_HANDLING_TRIGGER");
	/**
	 * Holds the definition of the message with ID ERR_TW_ERROR_SENDING_TRIGGER.
	 * Message text:
	 * Error sending the request for email message.
	 * Context:
	 * {0}
	 */
	public static final Message ERR_TW_ERROR_SENDING_TRIGGER = MESSAGE_SET.getMessage("ERR_TW_ERROR_SENDING_TRIGGER");
	/**
	 * Holds the definition of the message with ID JMX_MAILBOX_POLLERS.
	 * Message text:
	 * Wrapper for all mailbox pollers
	 */
	public static final Message JMX_MAILBOX_POLLERS = MESSAGE_SET.getMessage("JMX_MAILBOX_POLLERS");
	/**
	 * Holds the definition of the message with ID JMX_SC_EMAIL_BOX_POLLER.
	 * Message text:
	 * This component shows the properties for a specific email box poller.
	 */
	public static final Message JMX_SC_EMAIL_BOX_POLLER = MESSAGE_SET.getMessage("JMX_SC_EMAIL_BOX_POLLER");
	/**
	 * Holds the definition of the message with ID JMX_VC_NR_OF_MESSAGES_FAILED.
	 * Message text:
	 * Holds the total number of messages that have failed processing
	 */
	public static final Message JMX_VC_NR_OF_MESSAGES_FAILED = MESSAGE_SET.getMessage("JMX_VC_NR_OF_MESSAGES_FAILED");
	/**
	 * Holds the definition of the message with ID JMX_VC_NR_OF_MESSAGES_PROCESSED.
	 * Message text:
	 * Holds the total number of messages that have been examined
	 */
	public static final Message JMX_VC_NR_OF_MESSAGES_PROCESSED = MESSAGE_SET.getMessage("JMX_VC_NR_OF_MESSAGES_PROCESSED");
	/**
	 * Holds the definition of the message with ID JMX_VC_NR_OF_MESSAGES_IGNORED.
	 * Message text:
	 * Holds the total number of messages that have been ignored
	 */
	public static final Message JMX_VC_NR_OF_MESSAGES_IGNORED = MESSAGE_SET.getMessage("JMX_VC_NR_OF_MESSAGES_IGNORED");
	/**
	 * Holds the definition of the message with ID JMX_VC_NR_OF_MESSAGES_SUCCESS.
	 * Message text:
	 * Holds the total number of messages successfully processed.
	 */
	public static final Message JMX_VC_NR_OF_MESSAGES_SUCCESS = MESSAGE_SET.getMessage("JMX_VC_NR_OF_MESSAGES_SUCCESS");
	/**
	 * Holds the definition of the message with ID JMX_VC_LAST_POLL_TIME.
	 * Message text:
	 * Holds the last time on which the polling was executed.
	 */
	public static final Message JMX_VC_LAST_POLL_TIME = MESSAGE_SET.getMessage("JMX_VC_LAST_POLL_TIME");
	/**
	 * Holds the definition of the message with ID JMX_VC_EB_NAME.
	 * Message text:
	 * The name of the email box
	 */
	public static final Message JMX_VC_EB_NAME = MESSAGE_SET.getMessage("JMX_VC_EB_NAME");
	/**
	 * Holds the definition of the message with ID JMX_VC_EB_HOST.
	 * Message text:
	 * The host name of the email server
	 */
	public static final Message JMX_VC_EB_HOST = MESSAGE_SET.getMessage("JMX_VC_EB_HOST");
	/**
	 * Holds the definition of the message with ID JMX_VC_EB_PORT.
	 * Message text:
	 * The port number of the email server
	 */
	public static final Message JMX_VC_EB_PORT = MESSAGE_SET.getMessage("JMX_VC_EB_PORT");
	/**
	 * Holds the definition of the message with ID JMX_VC_EB_USERNAME.
	 * Message text:
	 * The username for the email box
	 */
	public static final Message JMX_VC_EB_USERNAME = MESSAGE_SET.getMessage("JMX_VC_EB_USERNAME");
	/**
	 * Holds the definition of the message with ID JMX_VC_EB_TYPE.
	 * Message text:
	 * The type of email connection
	 */
	public static final Message JMX_VC_EB_TYPE = MESSAGE_SET.getMessage("JMX_VC_EB_TYPE");
	/**
	 * Holds the definition of the message with ID JMX_VC_EB_POLLINTERVAL.
	 * Message text:
	 * Holds the polling interval.
	 */
	public static final Message JMX_VC_EB_POLLINTERVAL = MESSAGE_SET.getMessage("JMX_VC_EB_POLLINTERVAL");
	/**
	 * Holds the definition of the message with ID JMX_ALERT_ERROR_PROCESSING_MESSAGE.
	 * Message text:
	 * Error processing the message.
	 * Exception details:
	 * {0}
	 * Message context details:
	 * {1}
	 */
	public static final Message JMX_ALERT_ERROR_PROCESSING_MESSAGE = MESSAGE_SET.getMessage("JMX_ALERT_ERROR_PROCESSING_MESSAGE");
	/**
	 * Holds the definition of the message with ID JMX_ALERT_ERROR_PROCESSING_MESSAGE_DESC.
	 * Message text:
	 * This alert is issued when a trigger should be sent for an email message but for some reason it failed.
	 */
	public static final Message JMX_ALERT_ERROR_PROCESSING_MESSAGE_DESC = MESSAGE_SET.getMessage("JMX_ALERT_ERROR_PROCESSING_MESSAGE_DESC");
	/**
	 * Holds the definition of the message with ID JMX_ALERT_ERROR_SENDING_MESSAGE.
	 * Message text:
	 * Error sending the message via SMTP.
	 * Exception details:
	 * {0}
	 * Message content:
	 * {1}
	 */
	public static final Message JMX_ALERT_ERROR_SENDING_MESSAGE = MESSAGE_SET.getMessage("JMX_ALERT_ERROR_SENDING_MESSAGE");
	/**
	 * Holds the definition of the message with ID JMX_ALERT_ERROR_SENDING_MESSAGE_DESC.
	 * Message text:
	 * This alert is issued when an email is supposed to be sent, but for some reason it failed.
	 */
	public static final Message JMX_ALERT_ERROR_SENDING_MESSAGE_DESC = MESSAGE_SET.getMessage("JMX_ALERT_ERROR_SENDING_MESSAGE_DESC");
	/**
	 * Holds the definition of the message with ID JMX_OPERATION_GET_EMAILBOX_DETAILS.
	 * Message text:
	 * This operation returns the configuration details for the current email box.
	 */
	public static final Message JMX_OPERATION_GET_EMAILBOX_DETAILS = MESSAGE_SET.getMessage("JMX_OPERATION_GET_EMAILBOX_DETAILS");
	/**
	 * Holds the definition of the message with ID WRN_WAITING_FOR_THREAD_TO_FINISH.
	 * Message text:
	 * Error waiting for thread {0} to finish.
	 */
	public static final Message WRN_WAITING_FOR_THREAD_TO_FINISH = MESSAGE_SET.getMessage("WRN_WAITING_FOR_THREAD_TO_FINISH");
	/**
	 * Holds the definition of the message with ID FAT_ERROR_DURING_RESET.
	 * Message text:
	 * Ftal error resetting the processor
	 */
	public static final Message FAT_ERROR_DURING_RESET = MESSAGE_SET.getMessage("FAT_ERROR_DURING_RESET");
	/**
	 * Holds the definition of the message with ID METHOD_EXPUNGE_NOT_SUPPORTED_FOR_THIS_SERVER.
	 * Message text:
	 * Method 'expunge' not supported for this server.
	 */
	public static final Message METHOD_EXPUNGE_NOT_SUPPORTED_FOR_THIS_SERVER = MESSAGE_SET.getMessage("METHOD_EXPUNGE_NOT_SUPPORTED_FOR_THIS_SERVER");
	/**
	 * Holds the definition of the message with ID ERROR_WRITING_ARCHIVE_FOR_FILE_ACTUAL_MESSAGE.
	 * Message text:
	 * Error writing archive for file {0}
	 * Actual message:
	 * {1}
	 */
	public static final Message ERROR_WRITING_ARCHIVE_FOR_FILE_ACTUAL_MESSAGE = MESSAGE_SET.getMessage("ERROR_WRITING_ARCHIVE_FOR_FILE_ACTUAL_MESSAGE");
	/**
	 * Holds the definition of the message with ID COULD_NOT_ARCHIVE_THE_MESSAGE.
	 * Message text:
	 * Could not archive the message.
	 */
	public static final Message COULD_NOT_ARCHIVE_THE_MESSAGE = MESSAGE_SET.getMessage("COULD_NOT_ARCHIVE_THE_MESSAGE");
	/**
	 * Holds the definition of the message with ID INF_FOUND_AN_EMAIL_THAT_MATCHES_TRIGGER.
	 * Message text:
	 * Found an email that matches trigger {0}.
	 * The content of the email:
	 * {1}
	 * The definition of the trigger:
	 * {2}
	 */
	public static final Message INF_FOUND_AN_EMAIL_THAT_MATCHES_TRIGGER = MESSAGE_SET.getMessage("INF_FOUND_AN_EMAIL_THAT_MATCHES_TRIGGER");
	/**
	 * Holds the definition of the message with ID INF_IGNORING_MESSAGE_FOR_TRIGGER_EMAIL_CONTENT.
	 * Message text:
	 * Ignoring message for trigger {0}. 
	 * Email content: 
	 * {1}
	 */
	public static final Message INF_IGNORING_MESSAGE_FOR_TRIGGER_EMAIL_CONTENT = MESSAGE_SET.getMessage("INF_IGNORING_MESSAGE_FOR_TRIGGER_EMAIL_CONTENT");
	/**
	 * Holds the definition of the message with ID ERROR_CLOSING_FOLDERS.
	 * Message text:
	 * Error closing folders.
	 */
	public static final Message ERROR_CLOSING_FOLDERS = MESSAGE_SET.getMessage("ERROR_CLOSING_FOLDERS");
	/**
	 * Holds the definition of the message with ID ERROR_DUMPING_EMAIL_MESSAGE.
	 * Message text:
	 * Error dumping email message
	 */
	public static final Message ERROR_DUMPING_EMAIL_MESSAGE = MESSAGE_SET.getMessage("ERROR_DUMPING_EMAIL_MESSAGE");
	/**
	 * Holds the definition of the message with ID IE_ERROR_HANDLING_EVENT_FOR_MAIL.
	 * Message text:
	 * Error handling event for mail:
	 * {0}
	 */
	public static final Message IE_ERROR_HANDLING_EVENT_FOR_MAIL = MESSAGE_SET.getMessage("IE_ERROR_HANDLING_EVENT_FOR_MAIL");
	/**
	 * Holds the definition of the message with ID ERROR_EXECUTING_ACTION_0_FOR_CONTEXTN1.
	 * Message text:
	 * Error executing action {0} for context:
	 * {1}
	 */
	public static final Message ERROR_EXECUTING_ACTION_0_FOR_CONTEXTN1 = MESSAGE_SET.getMessage("ERROR_EXECUTING_ACTION_0_FOR_CONTEXTN1");
	/**
	 * Holds the definition of the message with ID ERR_DELETING_FOLDER_FROM_THE_FILESYSTEM.
	 * Message text:
	 * Error deleting folder {0} from the filesystem. These messages will not be processed, so they should be manually removed from the folder.
	 */
	public static final Message ERR_DELETING_FOLDER_FROM_THE_FILESYSTEM = MESSAGE_SET.getMessage("ERR_DELETING_FOLDER_FROM_THE_FILESYSTEM");
	/**
	 * Holds the definition of the message with ID WRN_FOR_TRIGGER_THERE_ARE_NO_ERROR_ACTIONS_DEFINED.
	 * Message text:
	 * For trigger {0} there are no error actions defined, so the temp files will NOT be deleted.
	 */
	public static final Message WRN_FOR_TRIGGER_THERE_ARE_NO_ERROR_ACTIONS_DEFINED = MESSAGE_SET.getMessage("WRN_FOR_TRIGGER_THERE_ARE_NO_ERROR_ACTIONS_DEFINED");
	/**
	 * Holds the definition of the message with ID JMX_POLL_NOW.
	 * Message text:
	 * This method tells the poller thread to immediately start polling the inbox
	 */
	public static final Message JMX_POLL_NOW = MESSAGE_SET.getMessage("JMX_POLL_NOW");

}